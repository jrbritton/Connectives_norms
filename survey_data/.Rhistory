library(lmerTest)
library(reshape2)
library(stats)
library(data.table)
library(dplyr)
library(plyr)
library(nlme)
library(r2glmm)
library(ggpubr)
library(corrplot)
library(PerformanceAnalytics)
library(tidyverse)
library(readr)
library(stringr)
library(magrittr)
library(imputeTS)
library(tibble)
Sys.setlocale("LC_CTYPE",locale="Chinese")
#Import freqTypes file
freqTypes = read_delim("C:/Users/herts/OneDrive/Desktop/RWorkspace/verbSurvey/freqTypesNew.txt",
col_names = T, delim = "\t")
subFreqTypes = subset(freqTypes, select = c(1,3,9))
#Lexical decision data
lexDecData = read_delim("C:/Users/herts/OneDrive/Desktop/RWorkspace/embExp/lexDecData.txt",
col_names = T, delim = "\t")
View(lexDecData)
EmbOneInfo = read_delim("C:/Users/herts/OneDrive/Desktop/RWorkspace/embExp/embOneInfo.txt",
col_names = T, delim = "\t")
#Merge lexical decision data with verb info
lexDecEmb = full_join(lexDecData,EmbOneInfo, by = c("mainStim1" = "filename"), stringsAsFactors = F)
lexDecEmb$syll2 = ifelse(grepl("Mono", lexDecEmb$mainStim1), 1, 0)
lexDecEmb$syll3 = ifelse(grepl("Di", lexDecEmb$mainStim1), 2, 0)
#Sum two columns and create a new one for totals
sum_column = lexDecEmb["syll2"] + lexDecEmb["syll3"]
#Replace NA numeric values with 0 (imputeTS library)
lexDecEmb = na_replace(lexDecEmb, 0)
#Sum together
lexDecEmb["sylls"] = sum_column2
#subset
lexDecEmb = subset(lexDecEmb[,c(1:10,12,13,14,17)])
# Count correct answers (corrAns = keyResp)
lexDecEmb$correct = 0
for (s in 1:nrow(lexDecEmb)) {
lexDecEmb[s,"correct"] = adist(lexDecEmb[s,2],lexDecEmb[s,3])
}
lexDecEmb$correct = gsub(0,1,lexDecEmb$correct)
lexDecEmb$correct = gsub(4,0,lexDecEmb$correct)
lexDecEmb$correct = as.numeric(as.character(lexDecEmb$correct))
# Count errors (corrAns != keyResp)
lexDecEmb$error = 0
for (s in 1:nrow(lexDecEmb)) {
lexDecEmb[s,"error"] = adist(lexDecEmb[s,2],lexDecEmb[s,3])
}
lexDecEmb$error = gsub(0,0,lexDecEmb$error)
lexDecEmb$error = gsub(4,1,lexDecEmb$error)
lexDecEmb$error = as.numeric(as.character(lexDecEmb$error))
View(lexDecEmb)
corrCount = aggregate(lexDecEmb$correct, by=list(variable=lexDecEmb$part), FUN=sum)
colnames(corrCount)[colnames(corrCount)=="x"] = "corr"
colnames(corrCount)[colnames(corrCount)=="variable"] = "part"
trial.num = aggregate(trial~part,data=lexDecEmb,length)
ntrial = trial.num[1,2]
thresh = ntrial*0.25
subjRT = aggregate(RT1~part,data=lexDecEmb,mean)
rtM = mean(subjRT$RT1)
rtSD = sd(subjRT$RT1)
SD2.5 = ((rtSD*2)+(rtSD/2))+rtM
rtDF = data.frame(subset(subjRT,RT1 < SD2.5))
# Exclude correct responses below 108 (75%)
filtCorr = merge(rtDF,corrCount, by = "part")
filtCorr = subset(filtCorr, corr > 107)
filtCorr = subset(filtCorr, select = c(1,3))
corrLexDecEmb = merge(filtCorr,lexDecEmb, by = "part")
#Remove NA rows
lexDecClean = corrLexDecEmb[complete.cases(corrLexDecEmb), ]
lexDecClean = merge(lexDecClean,subFreqTypes, by.x = "word", by.y = "wordSimp")
lexDecCorrelation = subset(lexDecClean[c(6,11:15,19)])
View(lexDecCorrelation)
round(cor(lexDecCorrelation),2)
rcorr(as.matrix(lexDecCorrelation))
corrplot(cor(lexDecCorrelation), method ="circle")
subActStat = subset(lexDecClean, actstat != "Other")
lexDecModelOneFrame = cbind(log10(lexDecClean[,11]), lexDecClean[,-11])
colnames(lexDecModelOneFrame)[1]="tf"
Sys.setlocale("LC_CTYPE",locale="Chinese")
findoutliers = function(a,b){ # a = dataframe, b = threshold in decimal form, i.e., 25% = 0.25
# must have columns Subject, Item, Trial, RT, and Error (0=correct, 1=incorrect, no text)
trial.num = aggregate(Trial~Subject,data=a,length)
ntrial = trial.num[1,2]
thresh = ntrial*b
subjRT = aggregate(RT~Subject,data=a,mean)
rtM = mean(subjRT$RT)
rtSD = sd(subjRT$RT)
SD2.5 = ((rtSD*2)+(rtSD/2))+rtM
rtDF = data.frame(subset(subjRT,RT > SD2.5))
subjERR = aggregate(Error~Subject,data=a,sum)
errDF = data.frame(subset(subjERR,Error > thresh))
itemERR = aggregate(Error~Item,data=a,sum)
itemDF = subset(itemERR, Error > thresh)
print(rtDF)
print(errDF)
print(itemDF)
}
subjRT = aggregate(RT1~part,data=lexDecModelOneFrame,mean)
RTM = mean(lexDecModelOneFrame$RT1)
RTSD = sd(lexDecModelOneFrame$RT1)
SD2.5 = ((RTSD*2)+(RTSD/2))+RTM
lexDecRTOutliers = data.frame(subset(lexDecModelOneFrame,RT1 > SD2.5))
lexDecModelOneFrame = data.frame(subset(lexDecModelOneFrame,RT1 < SD2.5))
lexDecParts = data.frame(unique(lexDecModelOneFrame$part))
colnames(lexDecParts)[1]="part"
lexDecModel1 = lmer(RT1 ~ EmbM + tf + poly + (1|sylls) +(1|part) + (1|word), data = lexDecModelOneFrame)
summary(lexDecModel1)
r2beta(lexDecModel1, partial = TRUE, method = "sgv", data = NULL)
#Plot results
ggplot(lexDecModelOneFrame, aes(x = EmbM, y = RT1)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
#Plot results
ggplot(lexDecModelOneFrame, aes(x = RT1, y = EmbM)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
library(tidyverse)
library(lme4)
library(postHoc)
library(DescTools)
library(agricolae)
library(RColorBrewer)
library(sjPlot)
library(ordinal)
library(emmeans)
library(openxlsx)
rstudioapi::writeRStudioPreference("data_viewer_max_columns", 1000L)
setwd("C:\\Users\\herts\\OneDrive\\Desktop\\Manu\\connectives\\survey_data")
italianConcess_Data <- read.csv("italianConcess_Data.csv")
italianConds <- read.csv("italianConditions.csv", encoding = "Italian")
italianConds <- italianConds[,c(-2:-4)]
italianConcData1a <- italianConcess_Data[c(1:5), c(2,4,5,7,8:87,636)]
italianConcData1b <- italianConcess_Data[c(6:9), c(2,4,5,7,88:164,636)]
italianConcData2a <- italianConcess_Data[c(10:15), c(2,4,5,7,165:244,636)]
italianConcData2b <- italianConcess_Data[c(16:21), c(2,4,5,7,245:321,636)]
italianConcData3a <- italianConcess_Data[c(22:26), c(2,4,5,7,322:401,636)]
italianConcData3b <- italianConcess_Data[c(27:32), c(2,4,5,7,402:478,636)]
italianConcData4a <- italianConcess_Data[c(33:35), c(2,4,5,7,479:558,636)]
italianConcData4b <- italianConcess_Data[c(36:40), c(2,4,5,7,559:635,636)]
italianConcData1a <- reshape2::melt(italianConcData1a, id.vars = c(1:3,85))
colnames(italianConcData1a)[colnames(italianConcData1a)=="variable"] = "Item"
colnames(italianConcData1a)[colnames(italianConcData1a)=="value"] = "Score"
