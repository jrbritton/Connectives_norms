lexDecCorrelation = subset(lexDecClean[c(6,11:15,19)])
View(lexDecCorrelation)
round(cor(lexDecCorrelation),2)
rcorr(as.matrix(lexDecCorrelation))
corrplot(cor(lexDecCorrelation), method ="circle")
subActStat = subset(lexDecClean, actstat != "Other")
lexDecModelOneFrame = cbind(log10(lexDecClean[,11]), lexDecClean[,-11])
colnames(lexDecModelOneFrame)[1]="tf"
Sys.setlocale("LC_CTYPE",locale="Chinese")
findoutliers = function(a,b){ # a = dataframe, b = threshold in decimal form, i.e., 25% = 0.25
# must have columns Subject, Item, Trial, RT, and Error (0=correct, 1=incorrect, no text)
trial.num = aggregate(Trial~Subject,data=a,length)
ntrial = trial.num[1,2]
thresh = ntrial*b
subjRT = aggregate(RT~Subject,data=a,mean)
rtM = mean(subjRT$RT)
rtSD = sd(subjRT$RT)
SD2.5 = ((rtSD*2)+(rtSD/2))+rtM
rtDF = data.frame(subset(subjRT,RT > SD2.5))
subjERR = aggregate(Error~Subject,data=a,sum)
errDF = data.frame(subset(subjERR,Error > thresh))
itemERR = aggregate(Error~Item,data=a,sum)
itemDF = subset(itemERR, Error > thresh)
print(rtDF)
print(errDF)
print(itemDF)
}
subjRT = aggregate(RT1~part,data=lexDecModelOneFrame,mean)
RTM = mean(lexDecModelOneFrame$RT1)
RTSD = sd(lexDecModelOneFrame$RT1)
SD2.5 = ((RTSD*2)+(RTSD/2))+RTM
lexDecRTOutliers = data.frame(subset(lexDecModelOneFrame,RT1 > SD2.5))
lexDecModelOneFrame = data.frame(subset(lexDecModelOneFrame,RT1 < SD2.5))
lexDecParts = data.frame(unique(lexDecModelOneFrame$part))
colnames(lexDecParts)[1]="part"
lexDecModel1 = lmer(RT1 ~ EmbM + tf + poly + (1|sylls) +(1|part) + (1|word), data = lexDecModelOneFrame)
summary(lexDecModel1)
r2beta(lexDecModel1, partial = TRUE, method = "sgv", data = NULL)
#Plot results
ggplot(lexDecModelOneFrame, aes(x = EmbM, y = RT1)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
#Plot results
ggplot(lexDecModelOneFrame, aes(x = RT1, y = EmbM)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
install.packages("rmarkdown")
install.packages("rmarkdown")
library(tidyverse)
library(postHoc)
library(DescTools)
library(agricolae)
library(RColorBrewer)
library(sjPlot)
library(ordinal)
library(emmeans)
library(openxlsx)
library(rmarkdown)
rstudioapi::writeRStudioPreference("data_viewer_max_columns", 1000L)
---
title: "Chinese 'Even-so' Summary"
library(tidyverse)
library(postHoc)
library(DescTools)
library(agricolae)
library(RColorBrewer)
library(sjPlot)
library(ordinal)
library(emmeans)
setwd("C:\\Users\\herts\\OneDrive\\Desktop\\Manu\\connectives\\Chinese")
chineseData <- read.csv("Results_1234.csv")
View(chineseData)
# Remove NA rows to only look at coherence scores
coherenceScores <- na.omit(chineseData)
View(coherenceScores)
table(coherenceScores$TrialNumber)
# Means by Sentence Condition
chineseCondNorms <- aggregate(Value~Condition, data=coherenceScores,mean);
names(chineseCondNorms) = c("Condition","Mean")
chineseCondSD <- aggregate(Value~Condition, data=coherenceScores,sd);
names(chineseCondSD)= c("Condition","SD")
chineseCondNorms <- merge(chineseCondNorms,chineseCondSD, by = "Condition")
library(tidyverse)
library(lme4)
library(postHoc)
library(DescTools)
library(agricolae)
library(RColorBrewer)
library(sjPlot)
library(ordinal)
library(emmeans)
library(stringr)
library(openxlsx)
setwd("C:\\Users\\herts\\OneDrive\\Desktop\\Manu\\connectives\\survey_data")
rstudioapi::writeRStudioPreference("data_viewer_max_columns", 1000L)
frenchData <- read.csv("french_data.csv")
frenchSentConds <- read.csv("frenchConditions.csv", encoding = "French")
frenchSentConds <- frenchSentConds[,c(-2:-4)]
colnames(frenchData)[colnames(frenchData)=="Time.spent.on.page.3"] = "Time"
table(frenchData$Age)
frenchData1a <- frenchData[c(1:5), c(1,4,5,7,10:89,638)]
frenchData1b <- frenchData[c(6:11), c(1,4,5,7,90:166,638)]
frenchData2a <- frenchData[c(12:16), c(1,4,5,7,167:246,638)]
frenchData2b <- frenchData[c(17:21), c(1,4,5,7,247:323,638)]
frenchData3a <- frenchData[c(22:26), c(1,4,5,7,324:403,638)]
frenchData3b <- frenchData[c(27:32), c(1,4,5,7,404:480,638)]
frenchData4a <- frenchData[c(33:38), c(1,4,5,7,481:560,638)]
frenchData4b <- frenchData[c(39:44), c(1,4,5,7,561:637,638)]
frenchData1a <- reshape2::melt(frenchData1a, id.vars = c(1:4,85))
colnames(frenchData1a)[colnames(frenchData1a)=="variable"] = "Item"
colnames(frenchData1a)[colnames(frenchData1a)=="value"] = "Score"
frenchData1b <- reshape2::melt(frenchData1b, id.vars = c(1:4,82))
colnames(frenchData1b)[colnames(frenchData1b)=="variable"] = "Item"
colnames(frenchData1b)[colnames(frenchData1b)=="value"] = "Score"
frenchData2a <- reshape2::melt(frenchData2a, id.vars = c(1:4,85))
colnames(frenchData2a)[colnames(frenchData2a)=="variable"] = "Item"
colnames(frenchData2a)[colnames(frenchData2a)=="value"] = "Score"
frenchData2b <- reshape2::melt(frenchData2b, id.vars = c(1:4,82))
colnames(frenchData2b)[colnames(frenchData2b)=="variable"] = "Item"
colnames(frenchData2b)[colnames(frenchData2b)=="value"] = "Score"
frenchData3a <- reshape2::melt(frenchData3a, id.vars = c(1:4,85))
colnames(frenchData3a)[colnames(frenchData3a)=="variable"] = "Item"
colnames(frenchData3a)[colnames(frenchData3a)=="value"] = "Score"
frenchData3b <- reshape2::melt(frenchData3b, id.vars = c(1:4,82))
colnames(frenchData3b)[colnames(frenchData3b)=="variable"] = "Item"
colnames(frenchData3b)[colnames(frenchData3b)=="value"] = "Score"
frenchData4a <- reshape2::melt(frenchData4a, id.vars = c(1:4,85))
colnames(frenchData4a)[colnames(frenchData4a)=="variable"] = "Item"
colnames(frenchData4a)[colnames(frenchData4a)=="value"] = "Score"
frenchData4b <- reshape2::melt(frenchData4b, id.vars = c(1:4,82))
colnames(frenchData4b)[colnames(frenchData4b)=="variable"] = "Item"
colnames(frenchData4b)[colnames(frenchData4b)=="value"] = "Score"
allDataFre <- rbind(frenchData1a,frenchData1b,frenchData2a,frenchData2b,
frenchData3a,frenchData3b,frenchData4a,frenchData4b)
View(allDataFre)
#View(allDataFre)
allDataFre <- merge(allDataFre,frenchSentConds, by.x = "Item", by.y = "SOS_ID")
frenchCondNorms <- aggregate(Score~CONDITION, data=allDataFre,mean);
names(frenchCondNorms) = c("CONDITION","Mean")
frenchCondSD <- aggregate(Score~CONDITION, data=allDataFre,sd);
names(frenchCondSD)= c("CONDITION","SD")
frenchCondNorms <- merge(frenchCondNorms,frenchCondSD, by = "CONDITION")
frenchAdvDist <- ggplot(allDataFre, aes(x=Score)) +
geom_histogram(binwidth=.5, colour="black", fill="steelblue") +
geom_vline(aes(xintercept=mean(Score, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1) +
ggtitle("French Distribution: Cependant")
frenchAdvDist
# Exclude participant 33 from time analysis
timeData <- subset(allDataFre, Part != 33)
timeBoxFre <- ggplot(timeData, aes(x = Quest, y = Time, fill = Quest)) +
geom_boxplot() +
ggtitle("Time to complete questionnaire")
timeBoxFre
scoreBoxFre <- ggplot(allDataFre, aes(x = CONDITION, y = Score, fill = CONDITION)) +
geom_boxplot() +
ggtitle("Sentence Conditions")
scoreBoxFre
allDataFre$Score <- as.factor(allDataFre$Score)
allDataFre$Part <- as.factor(allDataFre$Part)
View(allDataFre)
italianData <- read.csv("italianData.csv")
italianConds <- read.csv("italianConditions.csv", encoding = "Italian")
italianConds <- italianConds[,c(-2:-4)]
#View(italianData)
#View(italianConds)
# A pie chart of age distribution
table(italianConds$CONDITION)
italianData1a <- italianData[c(1:5), c(2,4,5,7,8:87,636)]
italianData1b <- italianData[c(6:10), c(2,4,5,7,88:164,636)]
italianData2a <- italianData[c(11:15), c(2,4,5,7,165:244,636)]
italianData2b <- italianData[c(16:20), c(2,4,5,7,245:321,636)]
italianData3a <- italianData[c(21:25), c(2,4,5,7,322:401,636)]
italianData3b <- italianData[c(26:30), c(2,4,5,7,402:478,636)]
italianData4a <- italianData[c(31:35), c(2,4,5,7,479:558,636)]
italianData4b <- italianData[c(36:40), c(2,4,5,7,559:635,636)]
italianData1a <- reshape2::melt(italianData1a, id.vars = c(1:4,85))
colnames(italianData1a)[colnames(italianData1a)=="variable"] = "Item"
colnames(italianData1a)[colnames(italianData1a)=="value"] = "Score"
italianData1b <- reshape2::melt(italianData1b, id.vars = c(1:4,82))
colnames(italianData1b)[colnames(italianData1b)=="variable"] = "Item"
colnames(italianData1b)[colnames(italianData1b)=="value"] = "Score"
italianData2a <- reshape2::melt(italianData2a, id.vars = c(1:4,85))
colnames(italianData2a)[colnames(italianData2a)=="variable"] = "Item"
colnames(italianData2a)[colnames(italianData2a)=="value"] = "Score"
italianData2b <- reshape2::melt(italianData2b, id.vars = c(1:4,82))
colnames(italianData2b)[colnames(italianData2b)=="variable"] = "Item"
colnames(italianData2b)[colnames(italianData2b)=="value"] = "Score"
italianData3a <- reshape2::melt(italianData3a, id.vars = c(1:4,85))
colnames(italianData3a)[colnames(italianData3a)=="variable"] = "Item"
colnames(italianData3a)[colnames(italianData3a)=="value"] = "Score"
italianData3b <- reshape2::melt(italianData3b, id.vars = c(1:4,82))
colnames(italianData3b)[colnames(italianData3b)=="variable"] = "Item"
colnames(italianData3b)[colnames(italianData3b)=="value"] = "Score"
italianData4a <- reshape2::melt(italianData4a, id.vars = c(1:4,85))
colnames(italianData4a)[colnames(italianData4a)=="variable"] = "Item"
colnames(italianData4a)[colnames(italianData4a)=="value"] = "Score"
italianData4b <- reshape2::melt(italianData4b, id.vars = c(1:4,82))
colnames(italianData4b)[colnames(italianData4b)=="variable"] = "Item"
colnames(italianData4b)[colnames(italianData4b)=="value"] = "Score"
allData <- rbind(italianData1a,italianData1b,italianData2a,italianData2b,
italianData3a,italianData3b,italianData4a,italianData4b)
allData <- merge(allData,italianConds, by.x = "Item", by.y = "SOS_ID")
# Means by Sentence Condition
#View(allData)
italianCondNorms <- aggregate(Score~CONDITION, data=allData,mean);
names(italianCondNorms) = c("CONDITION","Mean")
italianCondSD <- aggregate(Score~CONDITION, data=allData,sd);
names(italianCondSD)= c("CONDITION","SD")
italianCondNorms <- merge(italianCondNorms,italianCondSD, by = "CONDITION")
italianWordNorms <- aggregate(Score~TARGET_WORD, data=allData,mean);
names(italianWordNorms) = c("TARGET_WORD","Mean")
italianWordSD <- aggregate(Score~TARGET_WORD, data=allData,sd);
names(italianWordSD)= c("TARGET_WORD","SD")
italianWordNorms <- merge(italianWordNorms,italianWordSD, by = "TARGET_WORD")
condsWords <- italianConds[,c(2,3)]
italianData$all <- "Parts"
questAB <- c(rep('a',5),rep('b',5),rep('a',5),rep('b',5),rep('a',5),
rep('b',5),rep('a',5),rep('b',5))
italianData$questAB <- questAB
# Plot for distributions
#view(allData)
ggplot(allData, aes(x=Score)) + geom_histogram(binwidth=.5)
# Draw with black outline, white fill
ggplot(allData, aes(x=Score)) +
geom_histogram(binwidth=.5, colour="black", fill="steelblue") +
geom_density(aes(x=Score)) +
geom_vline(aes(xintercept=mean(Score, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1) +
ggtitle("Distribution: Adversative ('Tuttavia')")
# Density curve
ggplot(allData, aes(x=Score)) + geom_density()
timeBox <- ggplot(italianData, aes(x = Quest, y = Time, fill = Quest)) +
geom_boxplot() +
ggtitle("Time to complete questionnaire")
timeBox
questTimeBox <- ggplot(italianData, aes(x = questAB, y = Time, fill = questAB)) +
geom_boxplot() +
ggtitle("Time to complete questionnaire")
questTimeBox
scoreBox <- ggplot(allData, aes(x = CONDITION, y = Score, fill = CONDITION)) +
geom_boxplot() +
ggtitle("Sentence Conditions: Adversative ('Tuttavia')")
scoreBox
allData$Score <- as.factor(allData$Score)
allData$Part <- as.factor(allData$Part)
View(allData)
itaclmmModel <- clmm(Score~CONDITION + Gender + (1|Part), data = allData)
summary(itaclmmModel)
frenchAvd_clmm <- clmm(Score~CONDITION + Gender + (1|Part), data = allDataFre)
summary(frenchAdv_clmm)
frenchAvd_clmm <- clmm(Score~CONDITION + Gender + (1|Part), data = allDataFre)
summary(frenchAdv_clmm)
clmm(Score~CONDITION + Gender + (1|Part), data = allDataFre)
View(allDataFre)
frenchAdv_clmm <- clmm(Score ~ CONDITION + Gender + (1|Part), data = allDataFre)
summary(frenchAdv_clmm)
emmeans(frenchAdv_clmm,pairwise ~ CONDITION | Score, mode = "prob")
frenchConcData <- read.csv("frenchConcess_data.csv")
colnames(frenchConcData)[colnames(frenchConcData)=="TIME003"] = "Time"
View(frenchConcData)
# Update rows if data is added
frenchConcData1a <- frenchConcData[c(1:5), c(2,4:6,8:87,636)]
frenchConcData1b <- frenchConcData[c(6:10), c(2,4:6,88:164,636)]
frenchConcData2a <- frenchConcData[c(11:15), c(2,4:6,165:244,636)]
frenchConcData2b <- frenchConcData[c(16:19), c(2,4:6,245:321,636)]
frenchConcData3a <- frenchConcData[c(20:24), c(2,4:6,322:401,636)]
frenchConcData3b <- frenchConcData[c(25:29), c(2,4:6,402:478,636)]
frenchConcData4a <- frenchConcData[c(30:32), c(2,4:6,479:558,636)]
frenchConcData4b <- frenchConcData[c(33:36), c(2,4:6,559:635,636)]
# Melt data to long format
frenchConcData1a <- reshape2::melt(frenchConcData1a, id.vars = c(1:4,85))
colnames(frenchConcData1a)[colnames(frenchConcData1a)=="variable"] = "Item"
colnames(frenchConcData1a)[colnames(frenchConcData1a)=="value"] = "Score"
frenchConcData1b <- reshape2::melt(frenchConcData1b, id.vars = c(1:4,82))
colnames(frenchConcData1b)[colnames(frenchConcData1b)=="variable"] = "Item"
colnames(frenchConcData1b)[colnames(frenchConcData1b)=="value"] = "Score"
frenchConcData2a <- reshape2::melt(frenchConcData2a, id.vars = c(1:4,85))
colnames(frenchConcData2a)[colnames(frenchConcData2a)=="variable"] = "Item"
colnames(frenchConcData2a)[colnames(frenchConcData2a)=="value"] = "Score"
frenchConcData2b <- reshape2::melt(frenchConcData2b, id.vars = c(1:4,82))
colnames(frenchConcData2b)[colnames(frenchConcData2b)=="variable"] = "Item"
colnames(frenchConcData2b)[colnames(frenchConcData2b)=="value"] = "Score"
frenchConcData3a <- reshape2::melt(frenchConcData3a, id.vars = c(1:4,85))
colnames(frenchConcData3a)[colnames(frenchConcData3a)=="variable"] = "Item"
colnames(frenchConcData3a)[colnames(frenchConcData3a)=="value"] = "Score"
frenchConcData3b <- reshape2::melt(frenchConcData3b, id.vars = c(1:4,82))
colnames(frenchConcData3b)[colnames(frenchConcData3b)=="variable"] = "Item"
colnames(frenchConcData3b)[colnames(frenchConcData3b)=="value"] = "Score"
frenchConcData4a <- reshape2::melt(frenchConcData4a, id.vars = c(1:4,85))
colnames(frenchConcData4a)[colnames(frenchConcData4a)=="variable"] = "Item"
colnames(frenchConcData4a)[colnames(frenchConcData4a)=="value"] = "Score"
frenchConcData4b <- reshape2::melt(frenchConcData4b, id.vars = c(1:4,82))
colnames(frenchConcData4b)[colnames(frenchConcData4b)=="variable"] = "Item"
colnames(frenchConcData4b)[colnames(frenchConcData4b)=="value"] = "Score"
allConcDataFre <- rbind(frenchConcData1a,frenchConcData1b,frenchConcData2a,frenchConcData2b,
frenchConcData3a,frenchConcData3b,frenchConcData4a,frenchConcData4b)
allConcDataFre <- merge(allConcDataFre,frenchSentConds, by.x = "Item", by.y = "SOS_ID")
# Means
frenchConcCondNorms <- aggregate(Score~CONDITION, data=allConcDataFre,mean);
names(frenchConcCondNorms) = c("CONDITION","Mean")
frenchConcCondSD <- aggregate(Score~CONDITION, data=allConcDataFre,sd);
names(frenchConcCondSD) = c("CONDITION","SD")
frenchConcCondNorms <- merge(frenchConcCondNorms,frenchConcCondSD, by = "CONDITION")
View(frenchConcCondNorms)
frenchConcDist <- ggplot(allConcDataFre, aes(x=Score)) +
geom_histogram(binwidth=.5, colour="black", fill="steelblue") +
geom_vline(aes(xintercept=mean(Score, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1) +
ggtitle("French Concessive Distribution")
frenchConcDist
questTimeBoxFre2 <- ggplot(allConcDataFre, aes(x = Quest, y = Time, fill = Quest)) +
geom_boxplot() +
ggtitle("Time to complete questionnaire")
questTimeBoxFre2
scoreBoxFre2 <- ggplot(allConcDataFre, aes(x = CONDITION, y = Score, fill = CONDITION)) +
geom_boxplot() +
ggtitle("Sentence Conditions: Malgre cela")
scoreBoxFre2
allConcDataFre$Score <- as.factor(allConcDataFre$Score)
allConcDataFre$Part <- as.factor(allConcDataFre$Part)
frenchConc_clmm <- clmm(Score~CONDITION + Gender + (1|Part), data = allConcDataFre)
summary(frenchConc_clmm)
emmeans(clmmFrenchConc,pairwise ~ CONDITION | Score, mode = "prob")
emmeans(frenchConc_clmm,pairwise ~ CONDITION | Score, mode = "prob")
# This function will melt data to long format.
# Specify the df and the columns to transpose.
# Requires reshape2 / tidyverse
meltFunc <- function(df, cols){
df <- reshape2::melt(df, id.vars = c(cols))
}
test <- meltFunc(italianData1a, c(1:4,85))
# This function will melt data to long format.
# Specify the df and the columns to transpose as a numeric vector.
# Requires reshape2 / tidyverse
meltFunc <- function(df, cols){
df <- reshape2::melt(df, id.vars = cols)
}
test <- meltFunc(italianData1a, c(1:4,85))
testvec <- c(1:4,85)
test <- meltFunc(italianData1a, testvec)
test <- meltFunc(italianData1a, testvec)
# This function will melt data to long format.
# Specify the df and the columns to transpose as a numeric vector.
# Requires reshape2 / tidyverse
meltFunc <- function(df, cols){
df <- reshape2::melt(df, id.vars = c(cols))
}
testvec <- c(1:4,85)
test <- meltFunc(italianData1a, testvec)
# This function will melt data to long format.
# Specify the df and the columns to transpose as a numeric vector.
# Requires reshape2 / tidyverse
meltFunc <- function(df, cols){
df <- reshape2::melt(df, id.vars = cols)
}
testvec <- c(1:4,85)
test <- meltFunc(italianData1a, testvec)
print(testvec)
test <- meltFunc(italianData1a, c(testvec))
test <- meltFunc(italianData1a, c(1,2,3,4,85))
# This function will melt data to long format.
# Specify the df and the columns to transpose as a numeric vector.
# Requires reshape2 / tidyverse
meltFunc <- function(df, cols){
df <- reshape2::melt(df, id.vars = (cols))
}
testvec <- c(1:4,85)
test <- meltFunc(italianData1a, testvec)
?melt
# This function will melt data to long format.
# Specify the df and the columns to transpose as a numeric vector.
# Requires reshape2 / tidyverse
meltFunc <- function(df, cols){
df <- reshape2::melt(df, id.vars = cols)
}
testvec <- c(1:4,85)
test <- meltFunc(italianData1a, testvec)
View(test)
# This function will melt data to long format.
# Specify the df and the columns to transpose as a numeric vector.
# Requires reshape2 / tidyverse
meltFunc <- function(df, cols){
df <- reshape2::melt(df, id.vars = c(cols))
}
testvec <- c(1:4,85)
test <- meltFunc(italianData1a, testvec)
install.packages("gridarrange")
install.packages("gridextra")
install.packages("gridExtra")
library(gridExtra)
#define table
normsTable <- tableGrob(italianCondNorms)
#create scatterplot and add table underneath it
grid.arrange(normsTable)
?tableGrob
# Plot table for norms
normsTable <- tableGrob(italianCondNorms, theme = ttheme_minimal())
grid.arrange(normsTable)
# Plot table for norms
normsTable <- tableGrob(italianCondNorms, base_colour = "steelblue")
# Plot table for norms
normsTable <- tableGrob(italianCondNorms, base_colour = "blue")
grid.table(normsTable)
grid.table(italianCondNorms)
dev.off()
# Plot table for norms
normsTable <- tableGrob(italianCondNorms, base_colour = "black")
grid.arrange(normsTable)
# Plot table for norms
normsTable <- grid.table(italianCondNorms)
normsTable
?grid.table
# Plot table for norms
normsTable <- grid.table(italianCondNorms)
# Plot table for norms
grid.table(italianCondNorms, padding = unit(c(1,1, "mm")))
table(italianCondNorms)
# Plot table for norms
tableGrob(italianCondNorms)
# Plot table for norms
normsTable <- tableGrob(italianCondNorms)
grid.arrange(normsTable)
?tableGrob
# Plot table for norms
normsTable <- tableGrob(italianCondNorms, vp = NULL)
grid.arrange(normsTable)
# Table theme
tableTheme <- ttheme_minimal(
# Table theme
tableTheme <- ttheme_minimal(
# Table theme
tableTheme <- ttheme_minimal(
# Table theme
tableTheme <- ttheme_minimal(
# Table theme
tableTheme <- ttheme_minimal(
# Table theme
tableTheme <- ttheme_minimal(
# Table theme
tableTheme <- ttheme_minimal(
# Table theme
tableTheme <- ttheme_minimal(
core=list(bg_params = list(fill = "steelblue", col=NA)),
fg_params=list(fontface=3),
colhead=list(fg_params=list(col="black", fontface=4L)))
# Plot table for norms
normsTable <- tableGrob(italianCondNorms, theme = tableTheme)
# Plot table for norms
normsTable <- tableGrob(italianCondNorms, theme=tableTheme)
# Table theme
tableTheme <- ttheme_minimal(
core=list(bg_params = list(fill = "steelblue", col=NA)),
fg_params=list(fontface=3),
colhead=list(fg_params=list(col="black", fontface=4L)))
# Plot table for norms
normsTable <- tableGrob(italianCondNorms, theme=tableTheme)
grid.arrange(normsTable)
# Table theme
tableTheme <- ttheme_minimal(
core=list(bg_params = list(fill = "lightblue", col=NA)),
fg_params=list(fontface=3),
colhead=list(fg_params=list(col="black", fontface=4L)))
# Plot table for norms
normsTable <- tableGrob(italianCondNorms, theme=tableTheme)
grid.arrange(normsTable)
# Table theme
tableTheme <- ttheme_minimal(
core=list(bg_params = list(fill = "lightblue", col=NA)),
fg_params=list(fontface=3),
colhead=list(fg_params=list(col="steelblue", fontface=4L)))
# Plot table for norms
normsTable <- tableGrob(italianCondNorms, theme=tableTheme)
grid.arrange(normsTable)
# Table theme
tableTheme <- ttheme_minimal(
core=list(bg_params = list(fill = "lightblue", col=NA)),
fg_params=list(fontface=3),
colhead=list(fg_params=list(col="steelblue", fill = "lightblue", fontface=4L)))
# Plot table for norms
normsTable <- tableGrob(italianCondNorms, theme=tableTheme)
grid.arrange(normsTable)
# Table theme
tableTheme <- ttheme_minimal(
core=list(bg_params = list(fill = "lightblue", col=NA)),
fg_params=list(fontface=3),
colhead=list(fg_params=list(col="steelblue", fontface=4L)),
core=list(fg_params=list(hjust=0, x=0.1)),
rowhead=list(fg_params=list(hjust=0, x=0)))
# Plot table for norms
normsTable <- tableGrob(italianCondNorms, theme=tableTheme)
grid.arrange(normsTable)
# Table theme
tableTheme <- ttheme_minimal(
core=list(bg_params = list(fill = "lightblue")),
fg_params=list(fontface=3),
colhead=list(fg_params=list(col="steelblue", fontface=4L)),
core=list(fg_params=list(hjust=0, x=0.1)),
rowhead=list(fg_params=list(hjust=0, x=0)))
# Plot table for norms
normsTable <- tableGrob(italianCondNorms, theme=tableTheme)
grid.arrange(normsTable)
# Table theme
tableTheme <- ttheme_minimal(
core=list(bg_params = list(fill = "lightblue")),
fg_params=list(fontface=3),
colhead=list(fg_params=list(col="steelblue", fontface=4L)),
core=list(fg_params=list(hjust=0, x=0.1)),
rowhead=list(fg_params=list(hjust=0, x=0)))
# Plot table for norms
normsTable <- tableGrob(italianCondNorms, theme=tableTheme)
grid.arrange(normsTable)
