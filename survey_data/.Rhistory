library(lmerTest)
library(reshape2)
library(stats)
library(data.table)
library(dplyr)
library(plyr)
library(nlme)
library(r2glmm)
library(ggpubr)
library(corrplot)
library(PerformanceAnalytics)
library(tidyverse)
library(readr)
library(stringr)
library(magrittr)
library(imputeTS)
library(tibble)
Sys.setlocale("LC_CTYPE",locale="Chinese")
#Import freqTypes file
freqTypes = read_delim("C:/Users/herts/OneDrive/Desktop/RWorkspace/verbSurvey/freqTypesNew.txt",
col_names = T, delim = "\t")
subFreqTypes = subset(freqTypes, select = c(1,3,9))
#Lexical decision data
lexDecData = read_delim("C:/Users/herts/OneDrive/Desktop/RWorkspace/embExp/lexDecData.txt",
col_names = T, delim = "\t")
View(lexDecData)
EmbOneInfo = read_delim("C:/Users/herts/OneDrive/Desktop/RWorkspace/embExp/embOneInfo.txt",
col_names = T, delim = "\t")
#Merge lexical decision data with verb info
lexDecEmb = full_join(lexDecData,EmbOneInfo, by = c("mainStim1" = "filename"), stringsAsFactors = F)
lexDecEmb$syll2 = ifelse(grepl("Mono", lexDecEmb$mainStim1), 1, 0)
lexDecEmb$syll3 = ifelse(grepl("Di", lexDecEmb$mainStim1), 2, 0)
#Sum two columns and create a new one for totals
sum_column = lexDecEmb["syll2"] + lexDecEmb["syll3"]
#Replace NA numeric values with 0 (imputeTS library)
lexDecEmb = na_replace(lexDecEmb, 0)
#Sum together
lexDecEmb["sylls"] = sum_column2
#subset
lexDecEmb = subset(lexDecEmb[,c(1:10,12,13,14,17)])
# Count correct answers (corrAns = keyResp)
lexDecEmb$correct = 0
for (s in 1:nrow(lexDecEmb)) {
lexDecEmb[s,"correct"] = adist(lexDecEmb[s,2],lexDecEmb[s,3])
}
lexDecEmb$correct = gsub(0,1,lexDecEmb$correct)
lexDecEmb$correct = gsub(4,0,lexDecEmb$correct)
lexDecEmb$correct = as.numeric(as.character(lexDecEmb$correct))
# Count errors (corrAns != keyResp)
lexDecEmb$error = 0
for (s in 1:nrow(lexDecEmb)) {
lexDecEmb[s,"error"] = adist(lexDecEmb[s,2],lexDecEmb[s,3])
}
lexDecEmb$error = gsub(0,0,lexDecEmb$error)
lexDecEmb$error = gsub(4,1,lexDecEmb$error)
lexDecEmb$error = as.numeric(as.character(lexDecEmb$error))
View(lexDecEmb)
corrCount = aggregate(lexDecEmb$correct, by=list(variable=lexDecEmb$part), FUN=sum)
colnames(corrCount)[colnames(corrCount)=="x"] = "corr"
colnames(corrCount)[colnames(corrCount)=="variable"] = "part"
trial.num = aggregate(trial~part,data=lexDecEmb,length)
ntrial = trial.num[1,2]
thresh = ntrial*0.25
subjRT = aggregate(RT1~part,data=lexDecEmb,mean)
rtM = mean(subjRT$RT1)
rtSD = sd(subjRT$RT1)
SD2.5 = ((rtSD*2)+(rtSD/2))+rtM
rtDF = data.frame(subset(subjRT,RT1 < SD2.5))
# Exclude correct responses below 108 (75%)
filtCorr = merge(rtDF,corrCount, by = "part")
filtCorr = subset(filtCorr, corr > 107)
filtCorr = subset(filtCorr, select = c(1,3))
corrLexDecEmb = merge(filtCorr,lexDecEmb, by = "part")
#Remove NA rows
lexDecClean = corrLexDecEmb[complete.cases(corrLexDecEmb), ]
lexDecClean = merge(lexDecClean,subFreqTypes, by.x = "word", by.y = "wordSimp")
lexDecCorrelation = subset(lexDecClean[c(6,11:15,19)])
View(lexDecCorrelation)
round(cor(lexDecCorrelation),2)
rcorr(as.matrix(lexDecCorrelation))
corrplot(cor(lexDecCorrelation), method ="circle")
subActStat = subset(lexDecClean, actstat != "Other")
lexDecModelOneFrame = cbind(log10(lexDecClean[,11]), lexDecClean[,-11])
colnames(lexDecModelOneFrame)[1]="tf"
Sys.setlocale("LC_CTYPE",locale="Chinese")
findoutliers = function(a,b){ # a = dataframe, b = threshold in decimal form, i.e., 25% = 0.25
# must have columns Subject, Item, Trial, RT, and Error (0=correct, 1=incorrect, no text)
trial.num = aggregate(Trial~Subject,data=a,length)
ntrial = trial.num[1,2]
thresh = ntrial*b
subjRT = aggregate(RT~Subject,data=a,mean)
rtM = mean(subjRT$RT)
rtSD = sd(subjRT$RT)
SD2.5 = ((rtSD*2)+(rtSD/2))+rtM
rtDF = data.frame(subset(subjRT,RT > SD2.5))
subjERR = aggregate(Error~Subject,data=a,sum)
errDF = data.frame(subset(subjERR,Error > thresh))
itemERR = aggregate(Error~Item,data=a,sum)
itemDF = subset(itemERR, Error > thresh)
print(rtDF)
print(errDF)
print(itemDF)
}
subjRT = aggregate(RT1~part,data=lexDecModelOneFrame,mean)
RTM = mean(lexDecModelOneFrame$RT1)
RTSD = sd(lexDecModelOneFrame$RT1)
SD2.5 = ((RTSD*2)+(RTSD/2))+RTM
lexDecRTOutliers = data.frame(subset(lexDecModelOneFrame,RT1 > SD2.5))
lexDecModelOneFrame = data.frame(subset(lexDecModelOneFrame,RT1 < SD2.5))
lexDecParts = data.frame(unique(lexDecModelOneFrame$part))
colnames(lexDecParts)[1]="part"
lexDecModel1 = lmer(RT1 ~ EmbM + tf + poly + (1|sylls) +(1|part) + (1|word), data = lexDecModelOneFrame)
summary(lexDecModel1)
r2beta(lexDecModel1, partial = TRUE, method = "sgv", data = NULL)
#Plot results
ggplot(lexDecModelOneFrame, aes(x = EmbM, y = RT1)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
#Plot results
ggplot(lexDecModelOneFrame, aes(x = RT1, y = EmbM)) +
geom_point() +
stat_smooth(method = "lm", col = "red")
library(tidyverse)
library(lme4)
library(postHoc)
library(DescTools)
library(agricolae)
library(RColorBrewer)
library(sjPlot)
library(ordinal)
library(emmeans)
library(openxlsx)
library(readr)
rstudioapi::writeRStudioPreference("data_viewer_max_columns", 1000L)
setwd("C:\\Users\\herts\\OneDrive\\Desktop\\Manu\\connectives\\survey_data")
Sys.setlocale(category="LC_ALL", locale = "English_United States.1252")
italianData <- read.csv("italianData.csv")
italianConds <- read.csv("italianConditions.csv", encoding = "Italian")
italianConds <- italianConds[,c(-2:-4)]
italianData1a <- italianData[c(1:5), c(2,4,5,7,8:87,636)]
italianData1b <- italianData[c(6:10), c(2,4,5,7,88:164,636)]
italianData2a <- italianData[c(11:15), c(2,4,5,7,165:244,636)]
italianData2b <- italianData[c(16:20), c(2,4,5,7,245:321,636)]
italianData3a <- italianData[c(21:25), c(2,4,5,7,322:401,636)]
italianData3b <- italianData[c(26:30), c(2,4,5,7,402:478,636)]
italianData4a <- italianData[c(31:35), c(2,4,5,7,479:558,636)]
italianData4b <- italianData[c(36:40), c(2,4,5,7,559:635,636)]
italianData1a <- reshape2::melt(italianData1a, id.vars = c(1:4,85))
colnames(italianData1a)[colnames(italianData1a)=="variable"] = "Item"
colnames(italianData1a)[colnames(italianData1a)=="value"] = "Score"
italianData1b <- reshape2::melt(italianData1b, id.vars = c(1:4,82))
colnames(italianData1b)[colnames(italianData1b)=="variable"] = "Item"
colnames(italianData1b)[colnames(italianData1b)=="value"] = "Score"
italianData2a <- reshape2::melt(italianData2a, id.vars = c(1:4,85))
colnames(italianData2a)[colnames(italianData2a)=="variable"] = "Item"
colnames(italianData2a)[colnames(italianData2a)=="value"] = "Score"
italianData2b <- reshape2::melt(italianData2b, id.vars = c(1:4,82))
colnames(italianData2b)[colnames(italianData2b)=="variable"] = "Item"
colnames(italianData2b)[colnames(italianData2b)=="value"] = "Score"
italianData3a <- reshape2::melt(italianData3a, id.vars = c(1:4,85))
colnames(italianData3a)[colnames(italianData3a)=="variable"] = "Item"
colnames(italianData3a)[colnames(italianData3a)=="value"] = "Score"
italianData3b <- reshape2::melt(italianData3b, id.vars = c(1:4,82))
colnames(italianData3b)[colnames(italianData3b)=="variable"] = "Item"
colnames(italianData3b)[colnames(italianData3b)=="value"] = "Score"
italianData4a <- reshape2::melt(italianData4a, id.vars = c(1:4,85))
colnames(italianData4a)[colnames(italianData4a)=="variable"] = "Item"
colnames(italianData4a)[colnames(italianData4a)=="value"] = "Score"
italianData4b <- reshape2::melt(italianData4b, id.vars = c(1:4,82))
colnames(italianData4b)[colnames(italianData4b)=="variable"] = "Item"
colnames(italianData4b)[colnames(italianData4b)=="value"] = "Score"
allData <- rbind(italianData1a,italianData1b,italianData2a,italianData2b,
italianData3a,italianData3b,italianData4a,italianData4b)
allData <- merge(allData,italianConds, by.x = "Item", by.y = "SOS_ID")
# Means by Sentence Condition
#View(allData)
italianCondNorms <- aggregate(Score~CONDITION, data=allData,mean);
names(italianCondNorms) = c("CONDITION","Mean")
italianCondSD <- aggregate(Score~CONDITION, data=allData,sd);
names(italianCondSD)= c("CONDITION","SD")
italianCondNorms <- merge(italianCondNorms,italianCondSD, by = "CONDITION")
italianWordNorms <- aggregate(Score~TARGET_WORD, data=allData,mean);
names(italianWordNorms) = c("TARGET_WORD","Mean")
italianWordSD <- aggregate(Score~TARGET_WORD, data=allData,sd);
names(italianWordSD)= c("TARGET_WORD","SD")
italianWordNorms <- merge(italianWordNorms,italianWordSD, by = "TARGET_WORD")
condsWords <- italianConds[,c(2,3)]
italianData$all <- "Parts"
questAB <- c(rep('a',5),rep('b',5),rep('a',5),rep('b',5),rep('a',5),
rep('b',5),rep('a',5),rep('b',5))
italianData$questAB <- questAB
# Plot for distributions
#view(allData)
ggplot(allData, aes(x=Score)) + geom_histogram(binwidth=.5)
# Draw with black outline, white fill
ggplot(allData, aes(x=Score)) +
geom_histogram(binwidth=.5, colour="black", fill="steelblue") +
geom_density(aes(x=Score)) +
geom_vline(aes(xintercept=mean(Score, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1) +
ggtitle("Distribution: Adversative ('Tuttavia')")
# Density curve
ggplot(allData, aes(x=Score)) + geom_density()
timeBox <- ggplot(italianData, aes(x = Quest, y = Time, fill = Quest)) +
geom_boxplot() +
ggtitle("Time to complete questionnaire")
timeBox
questTimeBox <- ggplot(italianData, aes(x = questAB, y = Time, fill = questAB)) +
geom_boxplot() +
ggtitle("Time to complete questionnaire")
questTimeBox
scoreBox <- ggplot(allData, aes(x = CONDITION, y = Score, fill = CONDITION)) +
geom_boxplot() +
ggtitle("Sentence Conditions: Adversative ('Tuttavia')")
scoreBox
impNoConn_outliers <- subset(allData, CONDITION == "IMPLAUS_NOCONN")
impNoConn_outliers <- subset(impNoConn_outliers, Score > 4)
impNoConn_outliers <- subset(impNoConn_outliers, Time < 800)
table(impNoConn_outliers$Part)
plausNoConn_outliers <- subset(allData, CONDITION == "PLAUS_NOCONN")
plausNoConn_outliers <- subset(plausNoConn_outliers, Score < 5)
plausNoConn_outliers <- subset(plausNoConn_outliers, Time < 800)
impNoConnHi <- subset(allData, CONDITION == "IMPLAUS_NOCONN" & Score >= 4)
plausNoConnLo <- subset(allData, CONDITION == "PLAUS_NOCONN" & Score <= 4)
Sys.setlocale(category="LC_ALL", locale = "English_United States.1252")
italianAllRotas <- read.csv("italianAllRotas.csv")
View(italianAllRotas)
View(italianConds)
italianConds <- read.csv("italianConditions.csv", encoding = "Italian")
View(italianConds)
italianConds <- read.csv("italianConditions.csv", encoding = "Italian")
sent_len = c()  # Empty vector
for (var in italianConds$SENTENCE){
var = length(strsplit(var, " ")[[1]])
it = var     # 'it' is the value of var after one iteration
sent_len = c(sent_len, it) # add the value of it to empty vector
}
sent_len = data.frame(sent_len)  # make for loop output into a data frame
sent_lengths <- data.frame(table(sent_len))
View(sent_lengths)
colnames(sent_lengths) <- c("WordCount", "SentNum")
italianAllRotas <- cbind(italianAllRotas,sent_len)
italianConds <- cbind(italianConds,sent_len)
View(italianConds)
subRotas1 <- subset(italianConds, CONDITION == "PLAUS_NOCONN" &
sent_len == 20)
subRotas2 <- subset(italianConds, CONDITION == "IMPLAUS_NOCONN" &
sent_len == 20)
subRotas3 <- subset(italianConds, CONDITION == "PLAUS_CONN" &
sent_len == 20)
subRotas4 <- subset(italianConds, CONDITION == "IMPLAUS_CONN" &
sent_len == 20)
words_20 <- rbind(subRotas1,subRotas2,subRotas3,subRotas4)
table(words_20$CONDITION)
subRotas1 <- subset(italianConds, CONDITION == "PLAUS_NOCONN" &
sent_len == 21)
subRotas2 <- subset(italianConds, CONDITION == "IMPLAUS_NOCONN" &
sent_len == 21)
subRotas3 <- subset(italianConds, CONDITION == "PLAUS_CONN" &
sent_len == 21)
subRotas4 <- subset(italianConds, CONDITION == "IMPLAUS_CONN" &
sent_len == 21)
words_21 <- rbind(subRotas1,subRotas2,subRotas3,subRotas4)
table(words_21$CONDITION)
subRotas1 <- subset(italianConds, CONDITION == "PLAUS_NOCONN" &
sent_len == 22)
subRotas2 <- subset(italianConds, CONDITION == "IMPLAUS_NOCONN" &
sent_len == 22)
subRotas3 <- subset(italianConds, CONDITION == "PLAUS_CONN" &
sent_len == 22)
subRotas4 <- subset(italianConds, CONDITION == "IMPLAUS_CONN" &
sent_len == 22)
words_22 <- rbind(subRotas1,subRotas2,subRotas3,subRotas4)
table(words_22$CONDITION)
subRotas1 <- subset(italianConds, CONDITION == "PLAUS_NOCONN" &
sent_len == 23)
subRotas2 <- subset(italianConds, CONDITION == "IMPLAUS_NOCONN" &
sent_len == 23)
subRotas3 <- subset(italianConds, CONDITION == "PLAUS_CONN" &
sent_len == 23)
subRotas4 <- subset(italianConds, CONDITION == "IMPLAUS_CONN" &
sent_len == 23)
words_23 <- rbind(subRotas1,subRotas2,subRotas3,subRotas4)
table(words_23$CONDITION)
allwords <- rbind(words_20, words_21, words_22, words_23)
View(allwords)
table(allwords$TARGET_WORD)
write_delim(allwords, "C:/Users/herts/OneDrive/Desktop/allwords2.csv")
write_delim(allwords, delim = ',' "C:/Users/herts/OneDrive/Desktop/allwords2.csv")
?write_delim
write_excel_csv(allwords, delim = ",", "C:/Users/herts/OneDrive/Desktop/allwords2.csv")
